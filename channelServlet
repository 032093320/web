
package servlets;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.tomcat.dbcp.dbcp.BasicDataSource;

import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

import utilities.AppConstants;

/**
 * Servlet implementation class ChannelServlet
 */
@WebServlet("/ChannelServlet")
public class ChannelServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ChannelServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
		protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

			String command = "";
			String query = request.getParameter("query"); 
			Map parameters;
			System.out.println(query);
			Context context;
			ResultSet resultset = null;
			Connection connection = null;
			BasicDataSource datasource;
			PreparedStatement statement = null;
			ArrayList<String> rs = new ArrayList<String>();
			
			try 
			{
				context = new InitialContext();
				datasource = (BasicDataSource)context.lookup(getServletContext().getInitParameter(AppConstants.DB_DATASOURCE) + AppConstants.OPEN);
				connection = datasource.getConnection();
				statement = connection.prepareStatement(command);
				
				switch(query)
				{
					case "select":
						query = AppConstants.SELECT_ALL_USERS_STMT;
						resultset = statement.executeQuery(query);
						rs.add("{\n");
						while (resultset.next())
						{
							rs.add("{\n");
							rs.add("channelusername:" + (char)34 + resultset.getString(1) + (char)34 + (char)44);
							rs.add("channelcreator:" + (char)34 + resultset.getString(2) + (char)34 + (char)44);
							rs.add("channelnickname:" + (char)34 + resultset.getString(3) + (char)34 + (char)44);
							rs.add("channeldescription:" + (char)34 + resultset.getString(4) + (char)34 + (char)44);
							
							rs.add("}"); 
						}
						rs.add("}");	
						
						break;
						
					case "insert":
						parameters = request.getParameterMap(); 
						JsonElement map; 
						ArrayList<String> values = new ArrayList<String>(); 
						Iterator iter = parameters.keySet().iterator(); 
						String temp = "";
						JsonParser parser;

						try 
						{
							while(iter.hasNext())
							{
								temp = (String)iter.next();
								//System.out.println("temp: " + temp); 							
							}
							
							parser = new JsonParser();
							
							map =  parser.parse(temp);  
							//System.out.println(map.getAsString()); 
							
							values = utilities.Parser.getValues(temp);
							query = insert("CHANNEL", values);
							System.out.println(query);
							//statement.executeUpdate(query); 
						} 
						catch (Exception e) 
						{
							e.printStackTrace();
						} 
						break;
						
					case "update":
						query="";
						break;
					default:
						break;
				}
				
			} 
			catch (NamingException e) 
			{
				e.printStackTrace();
			} 
			catch (SQLException e) 
			{
				e.printStackTrace();
			}
			finally
			{
				try {
					if(!statement.isClosed()) statement.close();
					if (!connection.isClosed()) connection.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			//response.getWriter().append("Served at: ").append(uri);
			response.setContentType("text/plain");
			response.setCharacterEncoding("UTF-8");
			response.getWriter().print(rs); 
		}
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
